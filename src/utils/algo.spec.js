import * as algo from "./algo";

it("should filter invalid inputs", () => {
  const isValidNumber = algo.isValidNumber;
  expect(isValidNumber("1ap0", "10")).toEqual(false);
});

it("should convert numbers in arbitrary radixes", () => {
  // results generated by https://www.exploringbinary.com/base-converter/
  // further verified using https://apfloat.appspot.com/
  const convert2all = algo.convert2all;

  expect(convert2all("23421", 10, 25)[2]).toEqual("101101101111101");
  expect(convert2all("asfcu", 32, 25)[9]).toEqual("23433870");
  expect(convert2all("amdfhj", 24, 25)[17]).toEqual("3a605e5");
  // expect(convert2all("asf.ucf", 32, 25)[9]).toEqual(
  //   "16260.8482740282772136686146604"
  // );
});

/* Expose the following functions temporarily for testing only */
it("should convert fractions to decimal correctly ", () => {
  // results generated by https://www.exploringbinary.com/base-converter/
  // further verified using https://apfloat.appspot.com/
  const convertToDecimalFraction = algo.convertToDecimalFraction;

  expect(convertToDecimalFraction("23421", 10, 25).toString()).toEqual("23421");
  expect(convertToDecimalFraction("ucf", 32, 25).toString()).toEqual(
    "949676513671875"
  );
  expect(convertToDecimalFraction("mil", 24, 25).toString()).toEqual(
    "9494357638888888888888888"
  );
});

it("should convert fractions from decimal correctly ", () => {
  // results generated by https://www.exploringbinary.com/base-converter/
  // further verified using https://apfloat.appspot.com/
  const convertFromDecimalFraction = algo.convertFromDecimalFraction;

  expect(convertFromDecimalFraction("9234", 9, 50).toString()).toEqual(
    "82713755147848878728752748304372060862576774600472"
  );

  expect(convertFromDecimalFraction("0", 9, 50).toString()).toEqual("0");

  expect(convertFromDecimalFraction("123", 6, 50).toString()).toEqual(
    "04232240433515450310014211253224043351545031001421"
  );

  expect(convertFromDecimalFraction("2222", 9, 50).toString()).toEqual(
    "18887616358106300561521372848623212574218427686346"
  );

  expect(convertFromDecimalFraction("124", 9, 50).toString()).toEqual(
    "11035061356457142500282167785382753243174638860672"
  );
  expect(convertFromDecimalFraction("9234", 31, 50).toString()).toEqual(
    "sjc091130ijt9gcnb0gmb871gekt1q2i4hk5uqhtos22ns9o32"
  );
  expect(convertFromDecimalFraction("122351314", 31, 50).toString()).toEqual(
    "3ohu07h1mj2tcojp9te482l2rbblomocpn883tq47gm1m8bo2e"
  );
  expect(convertFromDecimalFraction("15", 6, 50).toString()).toEqual(
    "05222222222222222222222222222222222222222222222222"
  );
  expect(convertFromDecimalFraction("274", 6, 50).toString()).toEqual(
    "13510342441202145355231330051034244120214535523133"
  );

  expect(convertFromDecimalFraction("274", 9, 50).toString()).toEqual(
    "24166374487771273813423482026705884556316053102085"
  );
});

it("should convert integers to decimal", () => {
  // results generated by https://www.exploringbinary.com/base-converter/
  // further verified using https://apfloat.appspot.com/
  const convert2decimal = algo.convert2decimal;

  expect(convert2decimal("12476821", 14, 25).toString()).toEqual("122910845");
  expect(convert2decimal("asfaqiu", 33, 25).toString()).toEqual("14028647817");
});

/* Helper function */
// Given input like "1234" and radix 9, it prints "1*(1/9)+2*(1/9/9)+3*(1/9/9/9)+4*(1/9/9/9/9)"
// This can be feeded into some other scientific computing tools to see the decimal value of 1234_9
function printComputeStr(fractionStr, radix) {
  let str = "";
  [...fractionStr].forEach((digit, index) => {
    let significance = index + 1;
    let divideBy = `/${radix}`;
    str += `${digit2num(digit)}*(1${divideBy.repeat(significance)})`;
    str += index === fractionStr.length - 1 ? "" : "+";
  });
  return str;
}
