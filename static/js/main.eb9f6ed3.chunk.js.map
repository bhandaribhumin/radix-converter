{"version":3,"sources":["utils/algo.js","utils/caretPositioning.js","components/Converter.js","components/Header.js","components/Setting.js","components/App.js","serviceWorker.js","index.js"],"names":["digit2num","d","toLowerCase","charCodeAt","Number","num2digit","x","String","fromCharCode","convert2decimal","valueString","fromRadix","JSBI","BigInt","result","forEach","c","index","digit","multiply","exponentiate","length","add","convertFraction","precision","decimal","dividend","divisor","divide","toString","remainder","test","convertToDecimalFraction","Array","fill","map","_","toRadix","precison","multiplier","multiplicand","offset","nextDigit","slice","convertFromDecimalFraction","convert2all","negative","split","integralPart","fractionPart","integrals","valueInDecimal","results","keys","radix","convertIntegral","fractions","sign","saveCaret","event","target","focus","savedRange","document","getSelection","getRangeAt","startOffset","endOffset","restoreCaret","sel","window","restoredRange","createRange","textNode","firstChild","setStart","Math","min","setEnd","removeAllRanges","addRange","Converter","props","handleChange","numRefs","current","input","textContent","str","validChars","RegExp","isValidNumber","state","radixValues","setState","replace","renderNumber","ref","className","contentEditable","suppressContentEditableWarning","onInput","onClick","onKeyDown","tabIndex","spellCheck","style","fontSize","React","createRef","numRows","lastRadix","allNumbers","this","push","key","lineHeight","Component","Header","Setting","App","href","rel","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eb9f6ed3.chunk.js","sourcesContent":["import JSBI from \"jsbi\";\n\nexport function isValidNumber(str, radix) {\n  // precondition: 2 <= radix <= 36\n\n  let validChars = `0-${Math.min(9, radix - 1)}`;\n  if (radix > 10) {\n    validChars += `a-${String.fromCharCode(\"a\".charCodeAt(0) + radix - 11)}`;\n  }\n\n  let valid = new RegExp(\n    `^-?[${validChars}]+\\\\.?[${validChars}]*$|^-?\\\\.[${validChars}]+$`,\n    \"ig\"\n  );\n  return valid.test(str);\n}\n\n/*** Conversion Algorithm ***/\n/* All functions named `^convert\\w+` except \"convert2all\" \n   accept input matching [1-9a-z]+. Negative numbers and fractions are \n   in the end handled by \"convert2all\" */\n\n// input: [0-9A-Za-z]\n// output: 0-35\nlet digit2num = d => {\n  if (d > \"9\") {\n    d = d.toLowerCase();\n    return 10 + d.charCodeAt(0) - \"a\".charCodeAt(0);\n  } else {\n    return Number(d);\n  }\n};\n\n// input: 0-35\n// output: [0-9a-z]\nlet num2digit = x => {\n  if (x <= 9) return `${x}`;\n  else return String.fromCharCode(\"a\".charCodeAt(0) + x - 10);\n};\n\nfunction convert2decimal(valueString, fromRadix) {\n  if (fromRadix === 10) return JSBI.BigInt(valueString);\n\n  let result = JSBI.BigInt(0);\n  [...valueString].forEach((c, index) => {\n    let digit = digit2num(c);\n    let x = JSBI.multiply(\n      JSBI.BigInt(digit),\n      JSBI.exponentiate(\n        JSBI.BigInt(fromRadix),\n        JSBI.BigInt(valueString.length - index - 1)\n      )\n    );\n    result = JSBI.add(result, x);\n  });\n\n  return result;\n}\n\nfunction convertIntegral(valueString, fromRadix) {\n  let valueInDecimal = convert2decimal(valueString, fromRadix);\n\n  let results = Array(37).fill(null);\n\n  [...results.keys()].forEach(radix => {\n    if (radix === fromRadix) {\n      results[radix] = valueString;\n    } else if (radix === 0 || radix === 1) results[radix] = \"NaN\";\n    else results[radix] = valueInDecimal.toString(radix);\n  });\n\n  return results;\n}\n\nfunction convertFraction(valueString, fromRadix, precision = 5) {\n  let decimal = convertToDecimalFraction(valueString, fromRadix, precision);\n\n  let results = Array(37)\n    .fill(null)\n    .map((_, index) => {\n      if (index === fromRadix) return valueString;\n      else if (index === 0 || index === 1) return \"NaN\";\n      else return convertFromDecimalFraction(decimal, index, precision);\n    });\n\n  return results;\n}\n\nfunction convertToDecimalFraction(valueString, fromRadix, precision) {\n  if (fromRadix === 10) return JSBI.BigInt(valueString);\n  else {\n    let dividend = JSBI.multiply(\n        convert2decimal(valueString, fromRadix),\n        JSBI.BigInt(10)\n      ),\n      divisor = JSBI.exponentiate(\n        JSBI.BigInt(fromRadix),\n        JSBI.BigInt(valueString.length)\n      );\n    let result = JSBI.divide(dividend, divisor).toString(),\n      remainder = JSBI.remainder(dividend, divisor);\n\n    while (/[^0]/g.test(remainder.toString()) && result.length < precision) {\n      dividend = JSBI.multiply(remainder, JSBI.BigInt(10));\n      result += JSBI.divide(dividend, divisor).toString();\n      remainder = JSBI.remainder(dividend, divisor);\n    }\n\n    return result;\n  }\n}\n\nfunction convertFromDecimalFraction(valueString, toRadix, precison) {\n  let result = \"\";\n  let multiplier = JSBI.BigInt(digit2num(`${toRadix}`)),\n    multiplicand = JSBI.BigInt(valueString);\n\n  while (/[^0]/g.test(multiplicand) && result.length < precison) {\n    let offset = multiplicand.toString().length;\n    let x = JSBI.multiply(multiplicand, multiplier).toString();\n    let nextDigit = x.slice(0, x.length - offset);\n    result += num2digit(Number(nextDigit));\n    multiplicand = JSBI.BigInt(x.slice(x.length - offset));\n  }\n\n  return result;\n}\n\nexport function convert2all(valueString, fromRadix, precision) {\n  let negative = valueString[0] === \"-\";\n  valueString = negative ? valueString.slice(1) : valueString;\n\n  let [integralPart, fractionPart] = valueString.split(\".\");\n\n  let integrals = convertIntegral(integralPart, fromRadix);\n  let fractions =\n    fractionPart && Number(fractionPart) !== 0\n      ? convertFraction(fractionPart, fromRadix, precision)\n      : null;\n\n  let sign = negative ? \"-\" : \"\";\n  let numbers = Array(37)\n    .fill(null)\n    .map((_, radix) => {\n      if (radix === 0 || radix === 1) return \"NaN\";\n      else {\n        if (radix === fromRadix) return valueString; // do not aggressively modify the value while the user is still typing\n        if (fractions) return sign + integrals[radix] + \".\" + fractions[radix];\n        else return sign + integrals[radix];\n      }\n    });\n\n  return numbers;\n}\n","export function saveCaret(event, target) {\n  if (target) {\n    // avoid sel.rangeCount === 0 problem in WebKit\n    // See: https://stackoverflow.com/questions/22935320/uncaught-indexsizeerror-failed-to-execute-getrangeat-on-selection-0-is-not/23699875\n    target.focus();\n    let savedRange = document.getSelection().getRangeAt(0);\n    target.startOffset = savedRange.startOffset;\n    target.endOffset = savedRange.endOffset;\n  }\n}\n\nexport function restoreCaret(target) {\n  let sel = window.getSelection(),\n    restoredRange = document.createRange(),\n    textNode = target.firstChild;\n  if (textNode) {\n    restoredRange.setStart(\n      textNode,\n      Math.min(target.startOffset, textNode.length)\n    );\n    restoredRange.setEnd(textNode, Math.min(target.endOffset, textNode.length));\n    sel.removeAllRanges();\n    sel.addRange(restoredRange);\n  }\n}\n","import React from \"react\";\nimport { isValidNumber, convert2all } from \"../utils/algo\";\nimport { saveCaret, restoreCaret } from \"../utils/caretPositioning\";\nimport \"../stylesheets/Converter.css\";\n\nclass Converter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.numRefs = Array(37)\n      .fill(null)\n      .map(_ => React.createRef());\n    this.state = {\n      // radixValues[i] stores the representation of value in radix i\n      radixValues: convert2all(\"1024\", 10, 10),\n      // how many digits would be calculated for the fractional part\n      precision: 10,\n      // how many radixes are shown\n      numRows: 35,\n      // radix in the last row\n      lastRadix: 36\n    };\n  }\n\n  handleChange = (event, radix) => {\n    let target = this.numRefs[radix].current,\n      input = target.textContent;\n\n    if (!isValidNumber(input, radix)) {\n      target.textContent = this.state.radixValues[radix];\n      restoreCaret(target);\n    } else {\n      saveCaret(event, target);\n      this.setState(\n        {\n          radixValues: convert2all(\n            input.replace(/\\s/g, \"\"),\n            radix,\n            this.state.precision\n          )\n        },\n        () => {\n          restoreCaret(target);\n        }\n      );\n    }\n  };\n\n  renderNumber = radix => {\n    const ref = this.numRefs[radix];\n\n    return (\n      <>\n        <span\n          className=\"radix-number\"\n          ref={ref}\n          contentEditable={true}\n          suppressContentEditableWarning=\"true\"\n          onInput={event => this.handleChange(event, radix)}\n          onClick={event => saveCaret(event, ref.current)}\n          onKeyDown={event => saveCaret(event, ref.current)}\n          tabIndex={1}\n          spellCheck={false}\n        >\n          {this.state.radixValues[radix]}\n        </span>\n        <sub style={{ fontSize: \"50%\" }}>{radix}</sub>\n      </>\n    );\n  };\n\n  render() {\n    let allNumbers = [];\n    [...this.numRefs.keys()].forEach(radix => {\n      if (radix === 0 || radix === 1) return;\n      allNumbers.push(\n        <div className=\"radix-number-container\" key={radix}>\n          <div className=\"radix-number\">{this.renderNumber(radix)}</div>\n          <div style={{ lineHeight: \"80%\" }}>\n            {radix === this.state.lastRadix ? \"\\n\" : \"=\"}\n          </div>\n        </div>\n      );\n    });\n\n    return <div className=\"Converter\">{allNumbers}</div>;\n  }\n}\n\nexport default Converter;\n","import React from \"react\";\n\nfunction Header() {\n  return <div className=\"Header\">Radix Converter</div>;\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction Setting() {\n  return <div className=\"Setting\"></div>;\n}\n\nexport default Setting;\n","import React from \"react\";\nimport Converter from \"./Converter\";\nimport Header from \"./Header\";\nimport Setting from \"./Setting\";\nimport \"../stylesheets/App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <link\n        href=\"https://fonts.googleapis.com/css?family=Montserrat&display=swap\"\n        rel=\"stylesheet\"\n      ></link>\n      <link\n        href=\"https://fonts.googleapis.com/css?family=Architects+Daughter&display=swap\"\n        rel=\"stylesheet\"\n      ></link>\n      <Setting></Setting>\n      <Header></Header>\n      <Converter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}