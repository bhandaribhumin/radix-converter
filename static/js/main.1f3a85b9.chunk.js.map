{"version":3,"sources":["utils/utils.js","utils/caretPositioning.js","components/Converter.js","components/App.js","serviceWorker.js","index.js"],"names":["digit2num","d","toLowerCase","charCodeAt","Number","num2digit","x","String","fromCharCode","convert2decimal","valueString","fromRadix","JSBI","BigInt","result","negative","forEach","c","index","digit","multiply","exponentiate","length","add","unaryMinus","toString","convert2all","precision","split","integralPart","fractionPart","integrals","valueInDecimal","Array","fill","map","_","convertIntegral","fractions","decimal","dividend","divisor","divide","remainder","test","convertToDecimalFraction","toRadix","precison","multiplier","multiplicand","offset","nextDigit","slice","convertFromDecimalFraction","convertFraction","saveCaret","target","focus","savedRange","document","getSelection","getRangeAt","startOffset","endOffset","restoreCaret","sel","window","restoredRange","createRange","setStart","firstChild","setEnd","removeAllRanges","addRange","Converter","props","handleChange","event","radix","input","textContent","str","validDigits","Math","min","valid","biggestCharCode","validChars","RegExp","isValidNumber","state","radixValues","setState","replace","renderNumber","numFontSize","numRows","radixFontSize","className","style","fontSize","contentEditable","suppressContentEditableWarning","onInput","onClick","spellCheck","this","React","Component","App","href","rel","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f3a85b9.chunk.js","sourcesContent":["import JSBI from \"jsbi\";\n\nexport function isValidNumber(str, radix) {\n  // precondition: 2 <= radix <= 36\n  let validDigits = `0-${Math.min(9, radix - 1)}`,\n    valid = null;\n  if (radix > 10) {\n    let biggestCharCode = String.fromCharCode(\"a\".charCodeAt(0) + radix - 11);\n    let validChars = `a-${biggestCharCode}`;\n    valid = new RegExp(\n      `^-?[${validDigits}${validChars}]+\\\\.?[${validDigits}${validChars}]*$`,\n      \"ig\"\n    );\n  } else {\n    valid = new RegExp(`^-?[${validDigits}]+\\\\.?[${validDigits}]*$`, \"ig\");\n  }\n  return valid.test(str);\n}\n\n// input: [0-9A-Za-z]\n// output: 0-35\nlet digit2num = d => {\n  if (d > \"9\") {\n    d = d.toLowerCase();\n    return 10 + d.charCodeAt(0) - \"a\".charCodeAt(0);\n  } else {\n    return Number(d);\n  }\n};\n\n// input: 0-35\n// output: [0-9a-z]\nlet num2digit = x => {\n  if (x <= 9) return `${x}`;\n  else return String.fromCharCode(\"a\".charCodeAt(0) + x - 10);\n};\n\n// input: string representation of an integer in radix, where 2<=radix<=36\n// output: string representation of the input in decimal\nfunction convert2decimal(valueString, fromRadix) {\n  if (fromRadix === 10) return JSBI.BigInt(valueString);\n\n  let result = JSBI.BigInt(0),\n    negative = false;\n  [...valueString].forEach((c, index) => {\n    if (c === \"-\") {\n      negative = !negative;\n      return;\n    }\n    let digit = digit2num(c);\n    let x = JSBI.multiply(\n      JSBI.BigInt(digit),\n      JSBI.exponentiate(\n        JSBI.BigInt(fromRadix),\n        JSBI.BigInt(valueString.length - index - 1)\n      )\n    );\n    result = JSBI.add(result, x);\n  });\n\n  result = negative ? JSBI.unaryMinus(result) : result;\n\n  return result.toString();\n}\n\nexport function convert2all(valueString, fromRadix, precision) {\n  let [integralPart, fractionPart] = valueString.split(\".\");\n\n  let integrals = convertIntegral(integralPart, fromRadix);\n  let fractions = fractionPart\n    ? convertFraction(fractionPart, fromRadix, precision)\n    : null;\n  let numbers = Array(37)\n    .fill(null)\n    .map((_, index) => {\n      if (index === 0 || index === 1) return \"NaN\";\n      else {\n        if (fractions) return integrals[index] + \".\" + fractions[index];\n        else return integrals[index];\n      }\n    });\n\n  return numbers;\n}\n\nfunction convertIntegral(valueString, fromRadix) {\n  // precondition: valueString is a valid representation of the number in fromRadix\n  let valueInDecimal = convert2decimal(valueString, fromRadix);\n\n  let results = Array(37)\n    .fill(null)\n    .map((_, index) => {\n      if (index === fromRadix) return valueString;\n      else if (index === 0 || index === 1) return \"NaN\";\n      else return valueInDecimal.toString(index);\n    });\n\n  return results;\n}\n\nfunction convertFraction(valueString, fromRadix, precision = 5) {\n  let decimal = convertToDecimalFraction(valueString, fromRadix, precision);\n\n  let results = Array(37)\n    .fill(null)\n    .map((_, index) => {\n      if (index === fromRadix) return valueString;\n      else if (index === 0 || index === 1) return \"NaN\";\n      else return convertFromDecimalFraction(decimal, index, precision);\n    });\n\n  return results;\n}\n\n// input: valueString is of form \"xxxx\" originated from a fractional 0.xxxx\n// output: string representation of input in decimal, with \"0.\" stripped off\nfunction convertToDecimalFraction(valueString, fromRadix, precision) {\n  if (fromRadix === 10) return JSBI.BigInt(valueString);\n  else {\n    let dividend = JSBI.multiply(\n        JSBI.BigInt(convert2decimal(valueString, fromRadix)),\n        JSBI.BigInt(10)\n      ),\n      divisor = JSBI.exponentiate(\n        JSBI.BigInt(fromRadix),\n        JSBI.BigInt(valueString.length)\n      );\n    let result = JSBI.divide(dividend, divisor).toString(),\n      remainder = JSBI.remainder(dividend, divisor);\n\n    while (/[^0]/g.test(remainder.toString()) && result.length < precision) {\n      dividend = JSBI.multiply(remainder, JSBI.BigInt(10));\n      result += JSBI.divide(dividend, divisor).toString();\n      remainder = JSBI.remainder(dividend, divisor);\n    }\n\n    return result;\n  }\n}\n\nfunction convertFromDecimalFraction(valueString, toRadix, precison) {\n  let result = \"\";\n  let multiplier = JSBI.BigInt(digit2num(`${toRadix}`)),\n    multiplicand = JSBI.BigInt(valueString);\n\n  while (/[^0]/g.test(multiplicand) && result.length < precison) {\n    let offset = multiplicand.toString().length;\n    let x = JSBI.multiply(multiplicand, multiplier).toString();\n    let nextDigit = x.slice(0, x.length - offset);\n    result += num2digit(Number(nextDigit));\n    multiplicand = JSBI.BigInt(x.slice(x.length - offset));\n  }\n\n  return result;\n}\n","export function saveCaret(target) {\n  // avoid sel.rangeCount === 0 problem in WebKit\n  // See: https://stackoverflow.com/questions/22935320/uncaught-indexsizeerror-failed-to-execute-getrangeat-on-selection-0-is-not/23699875\n  target.focus();\n  let savedRange = document.getSelection().getRangeAt(0);\n  target.startOffset = savedRange.startOffset;\n  target.endOffset = savedRange.endOffset;\n}\n\nexport function restoreCaret(target) {\n  let sel = window.getSelection(),\n    restoredRange = document.createRange();\n  restoredRange.setStart(target.firstChild, target.startOffset);\n  restoredRange.setEnd(target.firstChild, target.endOffset);\n  sel.removeAllRanges();\n  sel.addRange(restoredRange);\n}\n","import React from \"react\";\nimport { isValidNumber, convert2all } from \"../utils/utils\";\nimport { saveCaret, restoreCaret } from \"../utils/caretPositioning\";\nimport \"../stylesheets/Converter.css\";\n\nclass Converter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // radixValues[i] stores the representation of value in radix i\n      radixValues: convert2all(\"1024\", 10, 10),\n      // how many digits would be calculated for the fractional part\n      precision: 10,\n      // how many radixes are shown\n      numRows: 4\n    };\n  }\n\n  handleChange = (event, radix) => {\n    let target = event.target;\n    let input = target.textContent;\n\n    if (!isValidNumber(input, radix)) {\n      target.textContent = this.state.radixValues[radix];\n      restoreCaret(target);\n    } else {\n      saveCaret(target);\n      this.setState(\n        {\n          radixValues: convert2all(\n            input.replace(/\\s/g, \"\"),\n            radix,\n            this.state.precision\n          )\n        },\n        () => {\n          restoreCaret(target);\n        }\n      );\n    }\n  };\n\n  renderNumber = radix => {\n    // we should maybe set an upper bound for the font size to avoid overflow\n    const numFontSize = 3 + 10 / this.state.numRows + radix / 3;\n    const radixFontSize = numFontSize / 2;\n\n    return (\n      <div className=\"RadixNumber\" style={{ fontSize: numFontSize + \"vh\" }}>\n        <div>{radix === 2 ? \"\\n\" : \"=\"}</div>\n        <div>\n          <span\n            contentEditable={true}\n            suppressContentEditableWarning=\"true\"\n            onInput={event => this.handleChange(event, radix)}\n            onClick={event => saveCaret(event.target)}\n            spellCheck={false}\n          >\n            {this.state.radixValues[radix]}\n          </span>\n          <sub style={{ fontSize: radixFontSize + \"vh\" }}>{radix}</sub>\n        </div>\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"Converter\">\n        {this.renderNumber(2)}\n        {this.renderNumber(8)}\n        {this.renderNumber(10)}\n        {this.renderNumber(16)}\n      </div>\n    );\n  }\n}\n\nexport default Converter;\n","import React from \"react\";\nimport Converter from \"./Converter\";\nimport \"../stylesheets/App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <link\n        href=\"https://fonts.googleapis.com/css?family=Montserrat&display=swap\"\n        rel=\"stylesheet\"\n      ></link>\n      {/* <header className=\"header\">Radix Calculator</header> */}\n      <Converter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}