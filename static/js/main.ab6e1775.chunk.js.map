{"version":3,"sources":["utils/caretPositioning.js","components/Converter.js","components/Setting.js","utils/algo.js","components/App.js","serviceWorker.js","index.js"],"names":["saveCaret","target","focus","savedRange","document","getSelection","getRangeAt","startOffset","endOffset","restoreCaret","sel","window","restoredRange","createRange","textNode","firstChild","setStart","Math","min","length","setEnd","removeAllRanges","addRange","Converter","renderNumber","radix","onFocus","event","style","color","onBlur","className","contentEditable","suppressContentEditableWarning","onInput","props","handleInput","onClick","onKeyDown","tabIndex","spellCheck","radixValues","fontSize","allNumbers","this","radixes","forEach","push","key","lineHeight","lastRadix","React","Component","Setting","buttons","Array","fill","keys","map","_","activeColor","backgroundColor","includes","toggleShownRadix","Number","textContent","id","slice","precision","type","max","value","background","onChange","changedPrecision","renderRadixes","renderSlider","digit2num","d","toLowerCase","charCodeAt","num2digit","x","String","fromCharCode","convert2decimal","valueString","fromRadix","JSBI","BigInt","result","c","index","digit","multiply","exponentiate","add","convertFraction","decimal","dividend","divisor","divide","toString","remainder","test","convertToDecimalFraction","toRadix","precison","multiplier","multiplicand","offset","nextDigit","convertFromDecimalFraction","convert2all","negative","split","integralPart","fractionPart","integrals","valueInDecimal","results","convertIntegral","fractions","sign","App","input","str","validChars","RegExp","isValidNumber","state","setState","currentValue","currentRadix","replace","newValue","toggleShownRadixes","initialShownRadixes","shownRadixes","filter","href","rel","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ab6e1775.chunk.js","sourcesContent":["export function saveCaret(target) {\n  // avoid sel.rangeCount === 0 problem in WebKit\n  // See: https://stackoverflow.com/questions/22935320/uncaught-indexsizeerror-failed-to-execute-getrangeat-on-selection-0-is-not/23699875\n  target.focus();\n  let savedRange = document.getSelection().getRangeAt(0);\n  target.startOffset = savedRange.startOffset;\n  target.endOffset = savedRange.endOffset;\n}\n\nexport function restoreCaret(target) {\n  let sel = window.getSelection(),\n    restoredRange = document.createRange(),\n    textNode = target.firstChild;\n  if (textNode) {\n    restoredRange.setStart(\n      textNode,\n      Math.min(target.startOffset, textNode.length)\n    );\n    restoredRange.setEnd(textNode, Math.min(target.endOffset, textNode.length));\n    sel.removeAllRanges();\n    sel.addRange(restoredRange);\n  }\n}\n","import React from \"react\";\nimport { saveCaret } from \"../utils/caretPositioning\";\nimport \"../stylesheets/Converter.css\";\n\nclass Converter extends React.Component {\n  renderNumber = radix => {\n    return (\n      <div\n        onFocus={event => {\n          event.target.style.color = `hsla(${radix * 10}, 70%, 40%, 0.6)`;\n        }}\n        onBlur={event => {\n          event.target.style.color = `rgba(10, 10, 10, 0.9)`;\n        }}\n      >\n        <span\n          className=\"radix-number\"\n          contentEditable={true}\n          suppressContentEditableWarning=\"true\"\n          onInput={event => this.props.handleInput(event, radix)}\n          onClick={event => saveCaret(event.target)}\n          onKeyDown={event => saveCaret(event.target)}\n          tabIndex={1}\n          spellCheck={false}\n        >\n          {this.props.radixValues[radix]}\n        </span>\n        <sub style={{ fontSize: \"50%\", color: \"inherit\" }}>{radix}</sub>\n      </div>\n    );\n  };\n\n  render() {\n    let allNumbers = [];\n    [...this.props.radixes].forEach(radix => {\n      if (radix === 0 || radix === 1) return;\n      allNumbers.push(\n        <div className=\"radix-number-container\" key={radix}>\n          <div className=\"radix-number\">{this.renderNumber(radix)}</div>\n          <div style={{ lineHeight: \"80%\" }}>\n            {radix === this.props.lastRadix ? \"\\n\" : \"=\"}\n          </div>\n        </div>\n      );\n    });\n\n    return <div className=\"Converter\">{allNumbers}</div>;\n  }\n}\n\nexport default Converter;\n","import React from \"react\";\nimport \"../stylesheets/Setting.css\";\n\nclass Setting extends React.Component {\n  renderRadixes() {\n    const inactiveColor = \"rgba(34,34,34,0.7)\";\n    let buttons = [\n      ...Array(37)\n        .fill(null)\n        .keys(),\n    ].map((_, radix) => {\n      let activeColor = `hsla(${radix * 10}, 70%, 40%, 0.6)`;\n      return (\n        <button\n          key={radix}\n          style={{\n            backgroundColor: this.props.radixes.includes(radix)\n              ? activeColor\n              : inactiveColor,\n          }}\n          onClick={event =>\n            this.props.toggleShownRadix(Number(event.target.textContent))\n          }\n        >\n          {radix}\n        </button>\n      );\n    });\n\n    return (\n      <div id=\"set-radixes\">\n        <div>Convert numbers in radixes</div>\n        <div id=\"radix-buttons\">{buttons.slice(2)}</div>\n      </div>\n    );\n  }\n\n  renderSlider() {\n    let precision = this.props.precision,\n      color = `hsla(${precision * 3}, 70%, 40%, 0.6)`;\n    return (\n      <div id=\"slidecontainer\">\n        <span>\n          Truncate to <span style={{ color: color }}>{precision}</span>{\" \"}\n          {precision <= 1 ? \"digit\" : \"digits\"} after the radix point\n        </span>\n        <input\n          type=\"range\"\n          min=\"0\"\n          max=\"100\"\n          value={precision}\n          className=\"slider\"\n          style={{ background: color }}\n          onChange={event => this.props.changedPrecision(event.target.value)}\n        ></input>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div id=\"Setting\">\n        {this.renderRadixes()}\n        {this.renderSlider()}\n      </div>\n    );\n  }\n}\n\nexport default Setting;\n","import JSBI from \"jsbi\";\n\nexport function isValidNumber(str, radix) {\n  // precondition: 2 <= radix <= 36\n\n  let validChars = `0-${Math.min(9, radix - 1)}`;\n  if (radix > 10) {\n    validChars += `a-${String.fromCharCode(\"a\".charCodeAt(0) + radix - 11)}`;\n  }\n\n  let valid = new RegExp(\n    `^-?[${validChars}]+\\\\.?[${validChars}]*$|^-?\\\\.[${validChars}]+$|^$`,\n    \"ig\"\n  );\n\n  return valid.test(str);\n}\n\n/*** Conversion Algorithm ***/\n/* All functions named `^convert\\w+` except \"convert2all\" \n   accept input matching [1-9a-z]+. Negative numbers and fractions are \n   in the end handled by \"convert2all\" */\n\n// input: [0-9A-Za-z]\n// output: 0-35\nlet digit2num = d => {\n  if (d > \"9\") {\n    d = d.toLowerCase();\n    return 10 + d.charCodeAt(0) - \"a\".charCodeAt(0);\n  } else {\n    return Number(d);\n  }\n};\n\n// input: 0-35\n// output: [0-9a-z]\nlet num2digit = x => {\n  if (x <= 9) return `${x}`;\n  else return String.fromCharCode(\"a\".charCodeAt(0) + x - 10);\n};\n\nfunction convert2decimal(valueString, fromRadix) {\n  if (fromRadix === 10) return JSBI.BigInt(valueString);\n\n  let result = JSBI.BigInt(0);\n  [...valueString].forEach((c, index) => {\n    let digit = digit2num(c);\n    let x = JSBI.multiply(\n      JSBI.BigInt(digit),\n      JSBI.exponentiate(\n        JSBI.BigInt(fromRadix),\n        JSBI.BigInt(valueString.length - index - 1)\n      )\n    );\n    result = JSBI.add(result, x);\n  });\n\n  return result;\n}\n\nfunction convertIntegral(valueString, fromRadix) {\n  let valueInDecimal = convert2decimal(valueString, fromRadix);\n\n  let results = Array(37).fill(null);\n\n  [...results.keys()].forEach(radix => {\n    if (radix === fromRadix) {\n      results[radix] = valueString;\n    } else if (radix === 0 || radix === 1) results[radix] = \"NaN\";\n    else results[radix] = valueInDecimal.toString(radix);\n  });\n\n  return results;\n}\n\nfunction convertFraction(valueString, fromRadix, precision = 5) {\n  let decimal = convertToDecimalFraction(valueString, fromRadix, precision);\n\n  let results = Array(37)\n    .fill(null)\n    .map((_, index) => {\n      if (index === fromRadix) return valueString;\n      else if (index === 0 || index === 1) return \"NaN\";\n      else return convertFromDecimalFraction(decimal, index, precision);\n    });\n\n  return results;\n}\n\nfunction convertToDecimalFraction(valueString, fromRadix, precision) {\n  if (fromRadix === 10) return JSBI.BigInt(valueString);\n  else {\n    let dividend = JSBI.multiply(\n        convert2decimal(valueString, fromRadix),\n        JSBI.BigInt(10)\n      ),\n      divisor = JSBI.exponentiate(\n        JSBI.BigInt(fromRadix),\n        JSBI.BigInt(valueString.length)\n      );\n    let result = JSBI.divide(dividend, divisor).toString(),\n      remainder = JSBI.remainder(dividend, divisor);\n\n    while (/[^0]/g.test(remainder.toString()) && result.length < precision) {\n      dividend = JSBI.multiply(remainder, JSBI.BigInt(10));\n      result += JSBI.divide(dividend, divisor).toString();\n      remainder = JSBI.remainder(dividend, divisor);\n    }\n\n    return result;\n  }\n}\n\nfunction convertFromDecimalFraction(valueString, toRadix, precison) {\n  let result = \"\";\n  let multiplier = JSBI.BigInt(digit2num(`${toRadix}`)),\n    multiplicand = JSBI.BigInt(valueString);\n\n  while (/[^0]/g.test(multiplicand) && result.length < precison) {\n    let offset = multiplicand.toString().length;\n    let x = JSBI.multiply(multiplicand, multiplier).toString();\n    let nextDigit = x.slice(0, x.length - offset);\n    result += num2digit(Number(nextDigit));\n    multiplicand = JSBI.BigInt(x.slice(x.length - offset));\n  }\n\n  return result;\n}\n\nexport function convert2all(valueString, fromRadix, precision) {\n  let negative = valueString[0] === \"-\";\n  valueString = negative ? valueString.slice(1) : valueString;\n\n  let [integralPart, fractionPart] = valueString.split(\".\");\n\n  let integrals = convertIntegral(integralPart, fromRadix);\n  let fractions =\n    fractionPart && Number(fractionPart) !== 0\n      ? convertFraction(fractionPart, fromRadix, precision)\n      : null;\n\n  let sign = negative ? \"-\" : \"\";\n  let numbers = Array(37)\n    .fill(null)\n    .map((_, radix) => {\n      if (radix === 0 || radix === 1) return \"NaN\";\n      else {\n        if (radix === fromRadix) return valueString; // do not aggressively modify the value while the user is still typing\n        if (fractions) return sign + integrals[radix] + \".\" + fractions[radix];\n        else return sign + integrals[radix];\n      }\n    });\n\n  return numbers;\n}\n","import React from \"react\";\nimport Converter from \"./Converter\";\nimport Setting from \"./Setting\";\nimport { saveCaret, restoreCaret } from \"../utils/caretPositioning\";\nimport { isValidNumber, convert2all } from \"../utils/algo\";\nimport \"../stylesheets/App.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    let precision = 10,\n      currentValue = \"1024\",\n      currentRadix = 10,\n      initialShownRadixes = [2, 8, 10, 16];\n    this.state = {\n      currentValue: currentValue,\n      currentRadix: currentRadix,\n      // radixValues[i] stores the representation of value in radix i\n      radixValues: convert2all(currentValue, currentRadix, 10),\n      precision: precision,\n      radixes: Array(37)\n        .fill(null)\n        .map((_, radix) => {\n          if (initialShownRadixes.includes(radix)) return radix;\n          else return null;\n        }),\n    };\n  }\n\n  handleInput = (event, radix) => {\n    let target = event.target,\n      input = target.textContent;\n\n    if (!isValidNumber(input, radix)) {\n      target.textContent = this.state.radixValues[radix];\n      restoreCaret(target);\n    } else {\n      saveCaret(target);\n      // let App handle setState instead\n      this.setState(\n        {\n          currentValue: input,\n          currentRadix: radix,\n          radixValues: convert2all(\n            input.replace(/\\s/g, \"\"),\n            radix,\n            this.state.precision\n          ),\n        },\n        () => {\n          restoreCaret(target);\n        }\n      );\n    }\n  };\n\n  changedPrecision = newValue => {\n    // need to recompute here\n    this.setState({ precision: newValue });\n  };\n\n  toggleShownRadixes = radix => {\n    let radixes = this.state.radixes.slice(0);\n    if (radixes[radix]) radixes[radix] = null;\n    else radixes[radix] = radix;\n\n    this.setState({ radixes: radixes });\n  };\n\n  render() {\n    let shownRadixes = this.state.radixes.filter(radix => radix != null);\n    return (\n      <div className=\"App\">\n        <link\n          href=\"https://fonts.googleapis.com/css?family=Montserrat&display=swap\"\n          rel=\"stylesheet\"\n        ></link>\n        <link\n          href=\"https://fonts.googleapis.com/css?family=Architects+Daughter&display=swap\"\n          rel=\"stylesheet\"\n        ></link>\n        <Setting\n          toggleShownRadix={this.toggleShownRadixes}\n          changedPrecision={this.changedPrecision}\n          precision={this.state.precision}\n          radixes={shownRadixes}\n        />\n        <Converter\n          radixValues={this.state.radixValues}\n          precision={this.state.precision}\n          radixes={shownRadixes}\n          currentValue={this.state.currentValue}\n          currentRadix={this.state.currentRadix}\n          lastRadix={shownRadixes[shownRadixes.length - 1]}\n          handleInput={this.handleInput}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}